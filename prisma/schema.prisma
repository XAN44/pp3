generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id              String    @id @default(cuid())
    nickname        String?   @unique
    name            String?   @unique
    username        String?   @unique
    password        String?
    bio             String?
    AtCreate        DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    email           String?   @unique
    emailVerified   DateTime?
    image           String?   @default("https://utfs.io/f/be6dc431-2ebb-4b58-bb61-631dc74b6d50-nr9dfj.png")
    coverimage      String?
    hasNotification Boolean?
    Facebook        String?
    IG              String?
    Twitter         String?
    Tiktok          String?

    accounts Account[]
    sessions Session[]

    post          Post[]
    comments      Comment[]
    notifications Notification[]
    Reply         Reply[]
    followers     Follows[]       @relation("following")
    following     Follows[]       @relation("follower")
    Article       Article[]
    Like          Like[]
    Visit         Visit[]
    Event         Event[]
    SearchHistory SearchHistory[]
    RegisterEvent RegisterEvent[]
    messages      Message[]

    Conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
    room           Room[]        @relation("UserRoom")
    Room           Room[]
    Seen           Message[]     @relation("Seen")
}

model Room {
    id            String    @id @default(cuid())
    name          String?
    isGroup       Boolean?
    users         User[]    @relation("UserRoom")
    createdAt     DateTime  @default(now())
    lastMessageAt DateTime  @default(now())
    sender        User?     @relation(fields: [senderId], references: [id], onDelete: Cascade)
    senderId      String?
    messages      Message[] @relation(name: "RoomMessages")
}

model Message {
    id             String        @id @default(cuid())
    text           String?
    image          String?
    createdAt      DateTime      @default(now())
    rooms          Room[]        @relation(name: "RoomMessages")
    sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
    senderId       String
    conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String?
    seen           User[]        @relation("Seen")
}

model Conversation {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    messagesIds String[]
    messages    Message[]

    userIds String[]
    User    User[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follows {
    id          String  @default(cuid())
    follower    User    @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User    @relation("following", fields: [followingId], references: [id])
    followingId String
    isFollow    Boolean @default(false)

    @@id([followerId, followingId])
}

model Post {
    id            String          @id @default(cuid())
    content       String?
    ImagePost     String?
    author        User?           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId      String?
    createdAt     DateTime        @default(now())
    comments      Comment[]
    Like          Like[]
    Visit         Visit[]
    Notification  Notification[]
    tag           ArticleTag[]
    SearchHistory SearchHistory[]
}

model Visit {
    id        String   @id @default(cuid())
    pageId    String?
    userId    String?
    articleId String?
    count     Int
    post      Post?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
    Event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String?
}

model SearchHistory {
    id         String   @id @default(cuid())
    getSearch  String
    timestamp  DateTime @default(now())
    userId     String?
    userTraget String?
    user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    article    Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId  String?
    event      Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId    String?
    Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId     String?
}

model Like {
    id           String         @id @default(cuid())
    postId       String?
    userId       String?
    articleId    String?
    isLiked      Boolean        @default(false)
    createdAt    DateTime       @default(now())
    article      Article?       @relation(fields: [articleId], references: [id], onDelete: Cascade)
    post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
    user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Notification Notification[]

    @@unique([postId, userId])
}

model Event {
    id                String          @id @default(cuid())
    title             String?
    eventContent      String?
    eventImage        String?
    author            User?           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId          String?
    eventstartTime    String? //*กิจกรรมเริ่มวันที่
    eventlocation     String? //*สถานที่จัดกิจกรรม
    eventparticipants String? //*จำนวนเปิดรับกิจกรรม
    eventcreator      String? //*ผู้สร้างกิจกรรม
    eventmore         String? //*เพิ่มเติม
    blogInArticle     Article?        @relation(fields: [articleId], references: [id], onDelete: Cascade)
    createAt          DateTime        @default(now())
    comment           Comment[]
    tag               ArticleTag[]
    Visit             Visit[]
    Notification      Notification[]
    SearchHistory     SearchHistory[]
    articleId         String?
    RegisterEvent     RegisterEvent[]
}

model RegisterEvent {
    id        String    @id @default(cuid())
    user      User?     @relation(fields: [userID], references: [id], onDelete: Cascade)
    userID    String?
    event     Event?    @relation(fields: [eventID], references: [id], onDelete: Cascade)
    eventID   String?
    createdAt DateTime? @default(now())

    @@unique([userID, eventID], name: "Unique_User_Event")
}

model Article {
    id             String          @id @default(cuid())
    title          String?
    articleContent String?
    content        String[]
    ArticleImage   String?
    author         User?           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId       String?
    createAt       DateTime        @default(now())
    comment        Comment[]
    tag            ArticleTag[]
    Visit          Visit[]
    Notification   Notification[]
    SearchHistory  SearchHistory[]
    Like           Like[]
    Event          Event[]
}

model ArticleTag {
    id        String   @id @default(cuid())
    tag       String?
    Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId String?
    Event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String?
    Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String?
}

model Comment {
    id           String         @id @default(cuid())
    text         String
    createdAt    DateTime?      @default(now())
    author       User?          @relation(fields: [authorid], references: [id], onDelete: Cascade)
    authorid     String?
    Post         Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId       String?
    Reply        Reply[]
    Article      Article?       @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId    String?
    Event        Event?         @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId      String?
    Notification Notification[]
}

model Notification {
    id         String  @id @default(cuid())
    body       String
    readStatus Boolean @default(false)

    userId    String?
    current   String?
    likeId    String?
    createAt  DateTime @default(now())
    commentId String?
    postId    String?
    articleId String?
    eventId   String?
    replyId   String?
    reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
    liked     Like?    @relation(fields: [likeId], references: [id], onDelete: Cascade)
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
    event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Reply {
    id             String         @id @default(cuid())
    replytext      String
    author         User?          @relation(fields: [authorid], references: [id], onDelete: Cascade)
    authorid       String?
    replyCommet    Comment?       @relation(fields: [replyCommentid], references: [id], onDelete: Cascade)
    replyCommentid String?
    Notification   Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
