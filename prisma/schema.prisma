generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("SUPABASE")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    nickname        String?   @unique
    name            String?   @unique
    username        String?   @unique
    password        String?
    bio             String?
    AtCreate        DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    email           String?   @unique
    emailVerified   DateTime?
    image           String?   @default("https://utfs.io/f/be6dc431-2ebb-4b58-bb61-631dc74b6d50-nr9dfj.png")
    coverimage      String?
    hasNotification Boolean?
    Facebook        String?
    IG              String?
    Twitter         String?
    Tiktok          String?

    accounts Account[]
    sessions Session[]

    post          Post[]
    comments      Comment[]
    notifications Notification[]
    Reply         Reply[]
    followers     Follows[]      @relation("following")
    following     Follows[]      @relation("follower")
    Article       Article[]
    Like          Like[]
    Visit         Visit[]
    Event         Event[]
}

model Follows {
    id          String  @default(cuid())
    follower    User    @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   User    @relation("following", fields: [followingId], references: [id])
    followingId String
    isFollow    Boolean @default(false)

    @@id([followerId, followingId])
}

model Post {
    id           String         @id @default(cuid())
    content      String?
    ImagePost    String?
    author       User?          @relation(fields: [authorId], references: [id])
    authorId     String?
    createdAt    DateTime       @default(now())
    comments     Comment[]
    Like         Like[]
    Visit        Visit[]
    Notification Notification[]
}

model Visit {
    id        String   @id @default(cuid())
    pageId    String?
    userId    String?
    articleId String?
    count     Int
    post      Post?    @relation(fields: [pageId], references: [id])
    user      User?    @relation(fields: [userId], references: [id])
    Article   Article? @relation(fields: [articleId], references: [id])
    Event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?
}

model Like {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    isLiked   Boolean  @default(false)
    createdAt DateTime @default(now())

    post Post @relation(fields: [postId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@unique([postId, userId])
}

model Article {
    id             String         @id @default(cuid())
    title          String?
    articleContent String?
    ArticleImage   String?
    author         User?          @relation(fields: [authorId], references: [id])
    authorId       String?
    createAt       DateTime       @default(now())
    comment        Comment[]
    tag            ArticleTag[]
    Visit          Visit[]
    Notification   Notification[]
}

model Event {
    id           String         @id @default(cuid())
    title        String?
    eventContent String?
    eventImage   String?
    author       User?          @relation(fields: [authorId], references: [id])
    authorId     String?
    createAt     DateTime       @default(now())
    comment      Comment[]
    tag          ArticleTag[]
    Visit        Visit[]
    Notification Notification[]
}

model ArticleTag {
    id        String   @id @default(cuid())
    tag       String?
    Article   Article? @relation(fields: [articleId], references: [id])
    articleId String?
    Event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?
}

model Comment {
    id           String         @id @default(cuid())
    text         String
    createdAt    DateTime       @default(now())
    author       User?          @relation(fields: [authorid], references: [id])
    authorid     String?
    Post         Post?          @relation(fields: [postId], references: [id])
    postId       String?
    Reply        Reply[]
    Article      Article?       @relation(fields: [articleId], references: [id])
    articleId    String?
    Event        Event?         @relation(fields: [eventId], references: [id])
    eventId      String?
    Notification Notification[]
}

model Reply {
    id             String   @id @default(cuid())
    replytext      String
    author         User?    @relation(fields: [authorid], references: [id])
    authorid       String?
    replyCommet    Comment? @relation(fields: [replyCommentid], references: [id])
    replyCommentid String?
}

model Notification {
    id        String   @id @default(cuid())
    body      String
    userId    String?
    createAt  DateTime @default(now())
    commentId String?
    postId    String?
    articleId String?
    eventId   String?
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment? @relation(fields: [commentId], references: [id])
    post      Post?    @relation(fields: [postId], references: [id])
    article   Article? @relation(fields: [articleId], references: [id])
    event     Event?   @relation(fields: [eventId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
