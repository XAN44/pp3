generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    nickname        String?   @unique
    name            String?   @unique
    username        String?   @unique
    password        String?
    bio             String?
    AtCreate        DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    email           String?   @unique
    emailVerified   DateTime?
    image           String?   @default("https://utfs.io/f/be6dc431-2ebb-4b58-bb61-631dc74b6d50-nr9dfj.png")
    coverimage      String?
    hasNotification Boolean?
    Facebook        String?
    IG              String?
    Twitter         String?
    Tiktok          String?

    accounts Account[]
    sessions Session[]

    post            Post[]
    comments        Comment[]
    notifications   Notification[]
    Reply           Reply[]
    followers       Follows[]       @relation("following")
    following       Follows[]       @relation("follower")
    Article         Article[]
    Like            Like[]
    Visit           Visit[]
    Event           Event[]
    SearchHistory   SearchHistory[]
    RegisterEvent   RegisterEvent[]
    conversationIds String[]        @db.ObjectId
    conversations   Conversation[]  @relation(fields: [conversationIds], references: [id])

    seenMessageIds String[]  @db.ObjectId
    seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

    messages Message[]
}

model Conversation {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    messagesIds String[]  @db.ObjectId
    messages    Message[]

    userIds String[] @db.ObjectId
    users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body      String?
    image     String?
    createdAt DateTime @default(now())

    seenIds String[] @db.ObjectId
    seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

    conversationId String       @db.ObjectId
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    senderId String @db.ObjectId
    sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follows {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    follower    User    @relation("follower", fields: [userId], references: [id])
    followerId  String
    following   User    @relation("following", fields: [userId], references: [id])
    followingId String
    isFollow    Boolean @default(false)
    userId      String  @db.ObjectId
}

model Post {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    content       String?
    ImagePost     String?
    author        User?           @relation(fields: [authorId], references: [id])
    authorId      String?         @db.ObjectId
    createdAt     DateTime        @default(now())
    comments      Comment[]
    Like          Like[]
    Visit         Visit[]
    Notification  Notification[]
    tag           ArticleTag[]
    SearchHistory SearchHistory[]
}

model Visit {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    pageId    String?  @db.ObjectId
    userId    String?  @db.ObjectId
    articleId String?  @db.ObjectId
    count     Int
    post      Post?    @relation(fields: [pageId], references: [id])
    user      User?    @relation(fields: [userId], references: [id])
    Article   Article? @relation(fields: [articleId], references: [id])
    Event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?  @db.ObjectId
}

model SearchHistory {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    getSearch  String
    timestamp  DateTime @default(now())
    userId     String?  @db.ObjectId
    userTraget String?
    user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    article    Article? @relation(fields: [articleId], references: [id])
    articleId  String?  @db.ObjectId
    event      Event?   @relation(fields: [eventId], references: [id])
    eventId    String?  @db.ObjectId
    Post       Post?    @relation(fields: [postId], references: [id])
    postId     String?  @db.ObjectId
}

model Like {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    postId       String?        @db.ObjectId
    userId       String?        @db.ObjectId
    articleId    String?        @db.ObjectId
    isLiked      Boolean        @default(false)
    createdAt    DateTime       @default(now())
    article      Article?       @relation(fields: [articleId], references: [id])
    post         Post?          @relation(fields: [postId], references: [id])
    user         User?          @relation(fields: [userId], references: [id])
    Notification Notification[]

    @@unique([postId, userId])
}

model Event {
    id                String          @id @default(auto()) @map("_id") @db.ObjectId
    title             String?
    eventContent      String?
    eventImage        String?
    author            User?           @relation(fields: [authorId], references: [id])
    authorId          String?         @db.ObjectId
    eventstartTime    String? //*กิจกรรมเริ่มวันที่
    eventlocation     String? //*สถานที่จัดกิจกรรม
    eventparticipants String? //*จำนวนเปิดรับกิจกรรม
    eventcreator      String? //*ผู้สร้างกิจกรรม
    eventmore         String? //*เพิ่มเติม
    blogInArticle     Article?        @relation(fields: [articleId], references: [id])
    createAt          DateTime        @default(now())
    comment           Comment[]
    tag               ArticleTag[]
    Visit             Visit[]
    Notification      Notification[]
    SearchHistory     SearchHistory[]
    articleId         String?         @db.ObjectId
    RegisterEvent     RegisterEvent[]
}

model RegisterEvent {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    user      User?     @relation(fields: [userID], references: [id])
    userID    String?   @db.ObjectId
    event     Event?    @relation(fields: [eventID], references: [id])
    eventID   String?   @db.ObjectId
    createdAt DateTime? @default(now())

    @@unique([userID, eventID], name: "Unique_User_Event")
}

model Article {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    title          String?
    articleContent String?
    ArticleImage   String?
    author         User?           @relation(fields: [authorId], references: [id])
    authorId       String?         @db.ObjectId
    createAt       DateTime        @default(now())
    comment        Comment[]
    tag            ArticleTag[]
    Visit          Visit[]
    Notification   Notification[]
    SearchHistory  SearchHistory[]
    Like           Like[]
    Event          Event[]
}

model ArticleTag {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    tag       String?
    Article   Article? @relation(fields: [articleId], references: [id])
    articleId String?  @db.ObjectId
    Event     Event?   @relation(fields: [eventId], references: [id])
    eventId   String?  @db.ObjectId
    Post      Post?    @relation(fields: [postId], references: [id])
    postId    String?  @db.ObjectId
}

model Comment {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    text         String
    createdAt    DateTime?      @default(now())
    author       User?          @relation(fields: [authorid], references: [id])
    authorid     String?        @db.ObjectId
    Post         Post?          @relation(fields: [postId], references: [id])
    postId       String?        @db.ObjectId
    Reply        Reply[]
    Article      Article?       @relation(fields: [articleId], references: [id])
    articleId    String?        @db.ObjectId
    Event        Event?         @relation(fields: [eventId], references: [id])
    eventId      String?        @db.ObjectId
    Notification Notification[]
}

model Notification {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    body       String
    readStatus Boolean @default(false)
    current    String?

    userId    String?  @db.ObjectId
    likeId    String?  @db.ObjectId
    createAt  DateTime @default(now())
    commentId String?  @db.ObjectId
    postId    String?  @db.ObjectId
    articleId String?  @db.ObjectId
    eventId   String?  @db.ObjectId
    replyId   String?  @db.ObjectId
    reply     Reply?   @relation(fields: [replyId], references: [id])
    liked     Like?    @relation(fields: [likeId], references: [id])
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    post      Post?    @relation(fields: [postId], references: [id])
    article   Article? @relation(fields: [articleId], references: [id])
    event     Event?   @relation(fields: [eventId], references: [id])
}

model Reply {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    replytext      String
    author         User?          @relation(fields: [authorid], references: [id])
    authorid       String?        @db.ObjectId
    replyCommet    Comment?       @relation(fields: [replyCommentid], references: [id])
    replyCommentid String?        @db.ObjectId
    Notification   Notification[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String   @db.ObjectId
    token      String   @unique @db.ObjectId
    expires    DateTime

    @@unique([identifier, token])
}
